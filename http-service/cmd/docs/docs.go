// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/deleteLog": {
            "delete": {
                "description": "Выполняет gRPC-запрос к лог-сервису для удаления лог-сообщения по указанным параметрам ` + "`" + `id` + "`" + ` и ` + "`" + `filename` + "`" + `.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Удалить лог по идентификатору и имени файла",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Уникальный идентификатор лога (например, rozNzBFDWy)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Имя файла, в котором содержится лог (например, http_logs.json)",
                        "name": "filename",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное удаление лога",
                        "schema": {
                            "$ref": "#/definitions/main.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации: отсутствуют обязательные параметры id или filename",
                        "schema": {
                            "$ref": "#/definitions/main.DeleteResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка при выполнении gRPC-запроса или лог не найден",
                        "schema": {
                            "$ref": "#/definitions/main.DeleteResponse"
                        }
                    }
                }
            }
        },
        "/getLog": {
            "get": {
                "description": "Обрабатывает HTTP GET-запрос и выполняет gRPC-вызов к лог-сервису для получения структурированного лог-сообщения.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "logs"
                ],
                "summary": "Получить лог по идентификатору и имени файла",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Уникальный идентификатор лога (например, rozNzBFDWy)",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Имя файла, из которого необходимо извлечь лог (например, http_logs.json)",
                        "name": "filename",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное чтение лога. Поле 'log' содержит структурированное сообщение.",
                        "schema": {
                            "$ref": "#/definitions/main.ReadResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации: отсутствует один или оба обязательных параметра (id, filename)",
                        "schema": {
                            "$ref": "#/definitions/main.ReadResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка: сбой gRPC-запроса или лог/файл не найден на стороне сервиса",
                        "schema": {
                            "$ref": "#/definitions/main.ReadResponse"
                        }
                    }
                }
            }
        },
        "/process": {
            "post": {
                "description": "Принимает JSON с последовательностью операций (` + "`" + `calc` + "`" + `, ` + "`" + `print` + "`" + `), преобразует во внутренние Protobuf-сообщения и передаёт в бизнес-сервис и лог-сервис по gRPC.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "operations"
                ],
                "summary": "Обработка бизнес-операций",
                "parameters": [
                    {
                        "description": "Список операций. Поля left и right могут быть числом или строкой (переменной).",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.requestJSON"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Операции успешно обработаны",
                        "schema": {
                            "$ref": "#/definitions/main.CompositeResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос (например, отсутствует поле или неверный формат)",
                        "schema": {
                            "$ref": "#/definitions/main.CompositeResponse"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера при обработке запроса",
                        "schema": {
                            "$ref": "#/definitions/main.CompositeResponse"
                        }
                    },
                    "503": {
                        "description": "gRPC-сервисы недоступны",
                        "schema": {
                            "$ref": "#/definitions/main.CompositeResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.CompositeResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.VariableValue"
                    }
                },
                "log_error": {
                    "type": "string"
                },
                "log_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "process_error": {
                    "type": "string"
                },
                "processing_duration": {
                    "type": "string"
                },
                "result_id": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "main.DeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "main.Duration": {
            "type": "object",
            "properties": {
                "nanos": {
                    "type": "integer"
                },
                "seconds": {
                    "type": "integer"
                }
            }
        },
        "main.LogEntry": {
            "type": "object",
            "properties": {
                "level": {
                    "type": "string"
                },
                "message": {
                    "$ref": "#/definitions/main.StructuredMessage"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "service_name": {
                    "type": "string"
                },
                "timestamp_send": {
                    "type": "integer"
                }
            }
        },
        "main.LogID": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "main.OperationResponse": {
            "type": "object",
            "properties": {
                "LogID": {
                    "$ref": "#/definitions/main.LogID"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.VariableValue"
                    }
                },
                "processing_time": {
                    "$ref": "#/definitions/main.Duration"
                },
                "warning": {
                    "type": "string"
                }
            }
        },
        "main.ReadResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "log": {
                    "$ref": "#/definitions/main.LogEntry"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "main.StructuredMessage": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.operationJSON"
                    }
                },
                "method": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "result": {
                    "$ref": "#/definitions/main.OperationResponse"
                }
            }
        },
        "main.VariableValue": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "integer"
                },
                "var": {
                    "type": "string"
                }
            }
        },
        "main.operationJSON": {
            "type": "object",
            "properties": {
                "left": {},
                "op": {
                    "description": "у операций print может отсутствовать op, сделаем опциональным",
                    "type": "string"
                },
                "right": {},
                "type": {
                    "type": "string"
                },
                "var": {
                    "type": "string"
                }
            }
        },
        "main.requestJSON": {
            "type": "object",
            "properties": {
                "operations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.operationJSON"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
